/* empty css                         */
import { c as createAstro, d as createComponent, r as renderTemplate, g as renderComponent, m as maybeRenderHead, f as addAttribute, e as renderSlot, u as unescapeHTML } from '../astro_BFJM5mxp.mjs';
import { b as $$Layout, $ as $$SectionContainer, a as $$Badge } from './blog_BZFACTp0.mjs';

const $$Astro = createAstro("https://porfolio.dev/");
const $$MarkdownPostLayout = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$MarkdownPostLayout;
  const { frontmatter } = Astro2.props;
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": frontmatter.title, "description": frontmatter.description, "image": frontmatter.image.url }, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "SectionContainer", $$SectionContainer, { "class": "px-6 py-16 md:py-36 leading-9" }, { "default": ($$result3) => renderTemplate` ${maybeRenderHead()}<div> <a href="/blog">${"<"} volver </a> </div> <img${addAttribute(frontmatter.image.url, "src")} class="rounded-xl mb-3 shadow-lg"${addAttribute(frontmatter.image.alt, "alt")}> <h1 class="text-4xl font-bold my-4">${frontmatter.title}</h1> <p class="text-gray-700 mb-2">üóìÔ∏è ${frontmatter.pubDate.slice(0, 10)}</p> <p class="text-gray-700 mb-4">‚úçÔ∏è Autor: ${frontmatter.author}</p> <div class="flex flex-wrap gap-2 mb-6"> ${frontmatter.tags.map((tag) => renderTemplate`${renderComponent($$result3, "Badge", $$Badge, { "class": "bg-green-700 text-white py-1 px-2 rounded-full shadow" }, { "default": ($$result4) => renderTemplate`
#${tag}` })}`)} </div> ${renderSlot($$result3, $$slots["default"])} <div class=""> <p class="text-xl font-bold my-4">S√≠gueme</p> <div class="flex"> <a class="border-gray-400 p-3 border-2 rounded-md mr-4" href="https://www.instagram.com/danielsuarezdev">
Instagram
</a> <a class="border-gray-400 p-3 border-2 rounded-md" href="https://twitter.com/DanielSuarezDev">
Twitter
</a> </div> </div> ` })} ` })}`;
}, "/home/danielsuarezdev/Documents/projects/frontend/my-portfolio/src/components/layouts/MarkdownPostLayout.astro", void 0);

const html = "<p>React Native es una popular plataforma de desarrollo de aplicaciones m√≥viles que permite a los desarrolladores crear aplicaciones nativas para iOS y Android utilizando JavaScript y React. Pero, ¬øc√≥mo estilizamos nuestra aplicaci√≥n en React Native? ¬øDeber√≠amos utilizar CSS o StyleSheet?</p>\n<p>Ambos CSS y StyleSheet tienen sus pros y contras, y la elecci√≥n depende de tus preferencias personales y de las necesidades de tu aplicaci√≥n.</p>\n<p>CSS (Cascading Style Sheets) es un lenguaje de estilo que se utiliza ampliamente en el desarrollo web. Con CSS, puedes definir estilos para tu aplicaci√≥n que se apliquen a todas las p√°ginas o componentes que los utilicen.</p>\n<p>Sin embargo, en React Native, CSS no funciona de la misma manera que en el desarrollo web. React Native no admite todas las propiedades de CSS y algunas propiedades funcionan de manera diferente en React Native en comparaci√≥n con el desarrollo web.</p>\n<p>Por otro lado, StyleSheet es una API nativa de React Native que permite a los desarrolladores definir estilos para sus aplicaciones m√≥viles. StyleSheet es m√°s eficiente y optimizado para aplicaciones m√≥viles que CSS y tambi√©n ofrece una mayor flexibilidad en cuanto a la personalizaci√≥n y la gesti√≥n de estilos.</p>\n<p>Adem√°s, StyleSheet es m√°s r√°pido y eficiente en comparaci√≥n con CSS, ya que los estilos se compilan directamente en la aplicaci√≥n m√≥vil en lugar de ser descargados desde un servidor web. Esto significa que los estilos se cargan m√°s r√°pido y no dependen de una conexi√≥n a Internet para funcionar.</p>\n<p>En resumen, si est√°s familiarizado con CSS y prefieres utilizarlo, puedes hacerlo en React Native, pero es importante tener en cuenta que algunas propiedades y comportamientos pueden diferir. Si prefieres una soluci√≥n nativa y optimizada para aplicaciones m√≥viles, StyleSheet es una buena opci√≥n.</p>\n<p>En √∫ltima instancia, la elecci√≥n depende de tus preferencias personales y de las necesidades de tu aplicaci√≥n. Ambos CSS y StyleSheet tienen sus pros y contras, y la elecci√≥n correcta depende de tus objetivos.</p>";

				const frontmatter = {"layout":"../../components/layouts/MarkdownPostLayout.astro","title":"¬øCSS o StyleSheet en react native?","pubDate":"2023-03-01T00:00:00.000Z","description":"React Native es una popular plataforma de desarrollo de aplicaciones...","author":"Daniel Suarez Dev","image":{"url":"/images/css-stylesheets.webp","alt":"react native img"},"tags":["react native","styles"]};
				const file = "/home/danielsuarezdev/Documents/projects/frontend/my-portfolio/src/pages/posts/css-o-stylesheet-react-native.md";
				const url = "/posts/css-o-stylesheet-react-native";
				function rawContent() {
					return "\nReact Native es una popular plataforma de desarrollo de aplicaciones m√≥viles que permite a los desarrolladores crear aplicaciones nativas para iOS y Android utilizando JavaScript y React. Pero, ¬øc√≥mo estilizamos nuestra aplicaci√≥n en React Native? ¬øDeber√≠amos utilizar CSS o StyleSheet?\n\nAmbos CSS y StyleSheet tienen sus pros y contras, y la elecci√≥n depende de tus preferencias personales y de las necesidades de tu aplicaci√≥n.\n\nCSS (Cascading Style Sheets) es un lenguaje de estilo que se utiliza ampliamente en el desarrollo web. Con CSS, puedes definir estilos para tu aplicaci√≥n que se apliquen a todas las p√°ginas o componentes que los utilicen.\n\nSin embargo, en React Native, CSS no funciona de la misma manera que en el desarrollo web. React Native no admite todas las propiedades de CSS y algunas propiedades funcionan de manera diferente en React Native en comparaci√≥n con el desarrollo web.\n\nPor otro lado, StyleSheet es una API nativa de React Native que permite a los desarrolladores definir estilos para sus aplicaciones m√≥viles. StyleSheet es m√°s eficiente y optimizado para aplicaciones m√≥viles que CSS y tambi√©n ofrece una mayor flexibilidad en cuanto a la personalizaci√≥n y la gesti√≥n de estilos.\n\nAdem√°s, StyleSheet es m√°s r√°pido y eficiente en comparaci√≥n con CSS, ya que los estilos se compilan directamente en la aplicaci√≥n m√≥vil en lugar de ser descargados desde un servidor web. Esto significa que los estilos se cargan m√°s r√°pido y no dependen de una conexi√≥n a Internet para funcionar.\n\nEn resumen, si est√°s familiarizado con CSS y prefieres utilizarlo, puedes hacerlo en React Native, pero es importante tener en cuenta que algunas propiedades y comportamientos pueden diferir. Si prefieres una soluci√≥n nativa y optimizada para aplicaciones m√≥viles, StyleSheet es una buena opci√≥n.\n\nEn √∫ltima instancia, la elecci√≥n depende de tus preferencias personales y de las necesidades de tu aplicaci√≥n. Ambos CSS y StyleSheet tienen sus pros y contras, y la elecci√≥n correcta depende de tus objetivos.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MarkdownPostLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

const cssOStylesheetReactNative = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content,
  compiledContent,
  default: Content,
  file,
  frontmatter,
  getHeadings,
  rawContent,
  url
}, Symbol.toStringTag, { value: 'Module' }));

export { $$MarkdownPostLayout as $, cssOStylesheetReactNative as c };
