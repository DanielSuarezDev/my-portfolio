/* empty css                         */
import { d as createComponent, r as renderTemplate, g as renderComponent, u as unescapeHTML } from '../astro_BFJM5mxp.mjs';
import { $ as $$MarkdownPostLayout } from './css-o-stylesheet-react-native_LRzCLsiC.mjs';

const html = "<h1 id=\"automatiza-tu-proceso-de-build-con-husky-antes-de-cada-commit\">Automatiza tu Proceso de Build con Husky antes de cada Commit</h1>\n<p>Automatizar tareas repetitivas en el ciclo de desarrollo de software no solo ahorra tiempo sino que tambi√©n aumenta la consistencia y reduce la posibilidad de errores. Una de estas tareas cruciales es asegurarse de que tu c√≥digo est√© correctamente compilado o ‚Äúconstruido‚Äù antes de ser a√±adido al repositorio. En este blog, te mostrare c√≥mo utilizar Husky, una herramienta popular para manejar Git hooks en proyectos Node.js, para automatizar tu proceso de build cada vez que realices un commit.</p>\n<p><img src=\"https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMmFrMDhxdHZkY21iNWVmNnZ2am5zNzM2eHZzOHU2eXo3ZXc5dTI5biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/OOWiRFxw17ToWpnxz4/giphy-downsized-large.gif\" alt=\"\"></p>\n<h2 id=\"qu√©-es-husky\">¬øQu√© es Husky?</h2>\n<p>Husky es una herramienta que te permite acceder f√°cilmente a Git hooks desde tu proyecto Node.js. Los hooks de Git son scripts que se ejecutan autom√°ticamente antes o despu√©s de eventos como <code>commit</code>, <code>push</code>, y <code>fetch</code>, permiti√©ndote automatizar tareas como tests, linting, y builds.</p>\n<h2 id=\"paso-1-instalaci√≥n-de-husky\">Paso 1: Instalaci√≥n de Husky</h2>\n<p>Para comenzar, necesitas instalar Husky en tu proyecto. Aseg√∫rate de estar en el directorio ra√≠z de tu proyecto y ejecuta el siguiente comando:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\"> npm</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> husky</span><span style=\"color:#79B8FF\"> --save-dev</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"> # o si prefieres usar yarn</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\"> yarn</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> husky</span><span style=\"color:#79B8FF\"> --dev</span></span></code></pre>\n<h2 id=\"paso-2-configuraci√≥n-de-husky\">Paso 2: Configuraci√≥n de Husky</h2>\n<p>Una vez instalado Husky, el siguiente paso es configurarlo para que se ejecute antes de cada commit. Esto se puede hacer directamente desde tu archivo package.json. Aseg√∫rate de que Husky se inicialice correctamente a√±adiendo un script de preparaci√≥n:</p>\n<p><em><em>A√±ade esto a tu package.json üòâ</em></em></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#9ECBFF\"> \"scripts\"</span><span style=\"color:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"prepare\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"husky install\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> }</span></span></code></pre>\n<p>Luego, ejecuta el script prepare para instalar Husky:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\"> npm</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#9ECBFF\"> prepare</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"> # o con yarn</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\"> yarn</span><span style=\"color:#9ECBFF\"> prepare</span></span></code></pre>\n<h2 id=\"paso-3-crea-un-hook-para-el-pre-commit\">Paso 3: Crea un hook para el pre-commit</h2>\n<p>Crea una carpeta en tu carpeta creada anteriormente gracias al comando llamado <em><em>.husky</em></em> en la raiz del proyecto\ncrea un archivo llamada <em><em>pre-commit</em></em> y alli puedes dar todas las instrucciones que desees, como el ejemplo que te dej√© en la imagen üôÉ.</p>\n<p><img src=\"/images/husky.webp\" alt=\"\"></p>\n<p>Con esta configuraci√≥n, Husky ejecutar√° autom√°ticamente tu proceso de build cada vez que intentes hacer un commit. Si el proceso de build falla, el commit ser√° abortado, asegur√°ndote de que solo el c√≥digo que cumple con los criterios de compilaci√≥n sea a√±adido al repositorio.</p>\n<h2 id=\"conclusi√≥n\">Conclusi√≥n</h2>\n<p>Automatizar tu proceso de build con Husky antes de cada commit es una pr√°ctica excelente que puede ahorrarte tiempo y ayudar a mantener la calidad de tu c√≥digo. Con unos pocos pasos sencillos, puedes configurar tu proyecto para que realice autom√°ticamente esta tarea, permiti√©ndote concentrarte en lo que realmente importa: escribir un c√≥digo excelente.</p>\n<p>Recuerda que la automatizaci√≥n es tu aliada en el desarrollo de software, y herramientas como Husky hacen que sea m√°s f√°cil que nunca integrarla en tu flujo de trabajo.</p>";

				const frontmatter = {"layout":"../../components/layouts/MarkdownPostLayout.astro","title":"Usando husky para hacer pre commit","pubDate":"2024-03-25T00:00:00.000Z","description":"Husky es una herramienta que nos ayuda accedes a git hooks facilmen...","author":"Daniel Suarez Dev","image":{"url":"/images/portada-husky.webp","alt":"react native img"},"tags":["git","husky"]};
				const file = "/home/danielsuarezdev/Documents/projects/frontend/porfolio.dev/src/pages/posts/husky-para-pre-commit.md";
				const url = "/posts/husky-para-pre-commit";
				function rawContent() {
					return "\n# Automatiza tu Proceso de Build con Husky antes de cada Commit\n\nAutomatizar tareas repetitivas en el ciclo de desarrollo de software no solo ahorra tiempo sino que tambi√©n aumenta la consistencia y reduce la posibilidad de errores. Una de estas tareas cruciales es asegurarse de que tu c√≥digo est√© correctamente compilado o \"construido\" antes de ser a√±adido al repositorio. En este blog, te mostrare c√≥mo utilizar Husky, una herramienta popular para manejar Git hooks en proyectos Node.js, para automatizar tu proceso de build cada vez que realices un commit.\n\n\n![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMmFrMDhxdHZkY21iNWVmNnZ2am5zNzM2eHZzOHU2eXo3ZXc5dTI5biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/OOWiRFxw17ToWpnxz4/giphy-downsized-large.gif)\n## ¬øQu√© es Husky?\n\nHusky es una herramienta que te permite acceder f√°cilmente a Git hooks desde tu proyecto Node.js. Los hooks de Git son scripts que se ejecutan autom√°ticamente antes o despu√©s de eventos como `commit`, `push`, y `fetch`, permiti√©ndote automatizar tareas como tests, linting, y builds.\n\n## Paso 1: Instalaci√≥n de Husky\n\nPara comenzar, necesitas instalar Husky en tu proyecto. Aseg√∫rate de estar en el directorio ra√≠z de tu proyecto y ejecuta el siguiente comando:\n\n```sh\n npm install husky --save-dev\n # o si prefieres usar yarn\n yarn add husky --dev\n```\n\n## Paso 2: Configuraci√≥n de Husky\n\nUna vez instalado Husky, el siguiente paso es configurarlo para que se ejecute antes de cada commit. Esto se puede hacer directamente desde tu archivo package.json. Aseg√∫rate de que Husky se inicialice correctamente a√±adiendo un script de preparaci√≥n:\n\n*_A√±ade esto a tu package.json üòâ_*\n\n```javascript\n \"scripts\": {\n    \"prepare\": \"husky install\"\n }\n```\n\nLuego, ejecuta el script prepare para instalar Husky:\n\n\n```sh\n npm run prepare\n # o con yarn\n yarn prepare\n```\n\n## Paso 3: Crea un hook para el pre-commit\n\nCrea una carpeta en tu carpeta creada anteriormente gracias al comando llamado *_.husky_* en la raiz del proyecto \ncrea un archivo llamada *_pre-commit_* y alli puedes dar todas las instrucciones que desees, como el ejemplo que te dej√© en la imagen üôÉ.\n\n\n![](/images/husky.webp)\n\n\nCon esta configuraci√≥n, Husky ejecutar√° autom√°ticamente tu proceso de build cada vez que intentes hacer un commit. Si el proceso de build falla, el commit ser√° abortado, asegur√°ndote de que solo el c√≥digo que cumple con los criterios de compilaci√≥n sea a√±adido al repositorio.\n\n\n## Conclusi√≥n\n\nAutomatizar tu proceso de build con Husky antes de cada commit es una pr√°ctica excelente que puede ahorrarte tiempo y ayudar a mantener la calidad de tu c√≥digo. Con unos pocos pasos sencillos, puedes configurar tu proyecto para que realice autom√°ticamente esta tarea, permiti√©ndote concentrarte en lo que realmente importa: escribir un c√≥digo excelente.\n\nRecuerda que la automatizaci√≥n es tu aliada en el desarrollo de software, y herramientas como Husky hacen que sea m√°s f√°cil que nunca integrarla en tu flujo de trabajo.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"automatiza-tu-proceso-de-build-con-husky-antes-de-cada-commit","text":"Automatiza tu Proceso de Build con Husky antes de cada Commit"},{"depth":2,"slug":"qu√©-es-husky","text":"¬øQu√© es Husky?"},{"depth":2,"slug":"paso-1-instalaci√≥n-de-husky","text":"Paso 1: Instalaci√≥n de Husky"},{"depth":2,"slug":"paso-2-configuraci√≥n-de-husky","text":"Paso 2: Configuraci√≥n de Husky"},{"depth":2,"slug":"paso-3-crea-un-hook-para-el-pre-commit","text":"Paso 3: Crea un hook para el pre-commit"},{"depth":2,"slug":"conclusi√≥n","text":"Conclusi√≥n"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MarkdownPostLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
