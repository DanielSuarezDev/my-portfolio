/* empty css                         */
import { d as createComponent, r as renderTemplate, g as renderComponent, u as unescapeHTML } from '../astro_BFJM5mxp.mjs';
import { $ as $$MarkdownPostLayout } from './css-o-stylesheet-react-native_mTQk4LCy.mjs';

const html = "<h1 id=\"introducci√≥n-al-control-de-versiones\">Introducci√≥n al Control de Versiones</h1>\n<p>Control de Versiones</p>\n<h2 id=\"-qu√©-es-el-control-de-versiones\">ü§® ¬øQu√© es el Control de Versiones?</h2>\n<p>El control de versiones es como el ‚Äòhistorial‚Äô de tu c√≥digo. Registra y almacena los cambios que has hecho en tu c√≥digo a lo largo del tiempo. Adem√°s, te permite guardar algunos cambios y comenzar una nueva funcionalidad sin perder el progreso utilizando una rama diferente. Esto posibilita funcionalidades como comparar tu c√≥digo y cambios con el c√≥digo ‚Äúoriginal‚Äù con el que empezaste, revertir (algunos de) tus cambios o fusionar cambios. ¬°Esto se vuelve cada vez m√°s importante si desarrollas software en equipo! Diferentes desarrolladores pueden trabajar en distintas caracter√≠sticas sin estorbarse mutuamente.</p>\n<p><img src=\"https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ21sbTQ1dzV2OG0xeWRoMGpra2F6N211cWQzZmZ0NXdmaWpiMzhmdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/VbnUQpnihPSIgIXuZv/giphy.gif\" alt=\"GIF\"></p>\n<h2 id=\"-por-qu√©-deber√≠as-usar-control-de-versiones\">ü§∑üèΩ ¬øPor qu√© deber√≠as usar Control de Versiones?</h2>\n<p>¬°Tener un registro de cambios de tu c√≥digo siempre es √∫til! Ayuda con la colaboraci√≥n, previene errores cuando m√∫ltiples desarrolladores trabajan en el mismo proyecto, previene la p√©rdida de datos. Tambi√©n se utiliza para revisar cambios y que otras personas lean tus modificaciones antes de querer fusionarlas en el proyecto, a esto se le llama ‚ÄúRevisi√≥n de C√≥digo‚Äù.</p>\n<h2 id=\"Ô∏è-qu√©-herramientas-puedes-usar\">üõ†Ô∏è ¬øQu√© herramientas puedes usar?</h2>\n<p>Existen muchas herramientas disponibles que te ayudan a versionar tu c√≥digo de manera adecuada. Git tiene de lejos la mayor cuota de mercado con casi el 90%, as√≠ que vamos con eso. La interfaz de l√≠nea de comandos (CLI) de git puede ser un poco abrumadora al principio, pero vale la pena echarle un vistazo m√°s de cerca. Aunque hay muchas interfaces gr√°ficas de usuario (GUI) que muestran lo que est√° sucediendo de una manera m√°s visual, recomendar√≠a aprender los comandos b√°sicos de la CLI de todos modos.</p>\n<h2 id=\"-c√≥mo-usar-git\">üßê ¬øC√≥mo usar git?</h2>\n<p>Para empezar querr√°s usar el comando <strong>git init</strong> para iniciar un nuevo proyecto o el comando</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">    git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#E1E4E8\"> [URL]</span></span></code></pre>\n<p>para descargar un proyecto existente y empezar a participar de inmediato.</p>\n <br>\n<p>Despu√©s de eso, te encontrar√°s en la rama <strong>main</strong>. Para no interferir con otras personas que trabajan en este proyecto, debes comenzar creando tu propia rama desde aqu√≠ usando <strong><code>git branch [Nombre de Rama]</code></strong> seguido de <strong><code>git checkout [Nombre de Rama]</code></strong>. Mientras creaste una rama con el primer comando, te cambias a ella con el segundo comando. Para ahorrar tiempo tambi√©n puedes usar el atajo <strong><code>git checkout -b [Nombre de Rama]</code></strong> donde la bandera <strong><code>-b</code></strong> crea y cambia a la rama especificada.</p>\n<br>\n<p>Ahora que est√°s en tu propia rama, puedes comenzar a desarrollar y hacer algunos cambios. Siempre que quieras especificar archivos que deseas seguir, usa <strong><code>git add [Nombre del Archivo]</code></strong> para rastrearlo. Tambi√©n puedes especificar muchos archivos o incluso carpetas usando <strong><code>*</code></strong> pero, siendo honestos, lo m√°s probable es que uses <strong><code>git add .</code></strong> la mayor√≠a de las veces, para rastrear TODOS los archivos en esa ruta, incluyendo archivos en carpetas.</p>\n<p>Cuando termines con tus cambios querr√°s comprometerlos usando <strong><code>git commit -m \"[Mensaje del Commit]\"</code></strong>. Esto agrupar√° todos los cambios en un commit con un mensaje corto pero descriptivo que le dice a otros lo que has hecho. Si no quieres comprometer tus cambios, podr√≠as querer usar</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">    #para ver qu√© ha cambiado</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    git</span><span style=\"color:#9ECBFF\"> diff</span></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">    #para deshacer el seguimiento de tus cambios</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    git</span><span style=\"color:#9ECBFF\"> reset</span><span style=\"color:#E1E4E8\"> [archivo]</span></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">    #para empujar esos cambios a un stash al que puedes volver m√°s tarde usando</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    git</span><span style=\"color:#9ECBFF\"> stash</span><span style=\"color:#9ECBFF\"> push</span></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D\">    #que cargar√° todos los cambios del stash en tu estado actual.</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    git</span><span style=\"color:#9ECBFF\"> stash</span><span style=\"color:#9ECBFF\"> pop</span></span></code></pre>\n<p>Todo esto ocurre en tu m√°quina local, si quieres compartir tu c√≥digo con los dem√°s debes hacer\n<strong><code>git push</code></strong> de esos cambios.\n<br></p>\n<p>Para ver qu√© han hecho otros puedes usar <strong><code>git fetch</code></strong>, esto cargar√° todas las ramas del estado remoto. Si quieres traer commits y sus cambios y fusionarlos en tu estado actual usa <strong><code>git pull</code></strong>.</p>\n<p>Por √∫ltimo est√° <strong><code>git merge [Nombre de Rama]</code></strong> que intentar√° fusionar cambios de otra rama en tu estado actual. Esto podr√≠a resultar en conflictos de fusi√≥n si tanto tus cambios como los de la rama que fusionaste apuntan al mismo archivo / l√≠neas de c√≥digo.</p>\n<p>¬°Estos son los b√°sicos! Dado que git es tan popular, puedes googlear f√°cilmente tu camino hacia la soluci√≥n necesaria. Casi nunca puedes perder c√≥digo, a menos que uses comandos de reset o banderas como <strong><code>--force</code></strong> o <strong><code>--hard</code></strong> las cuales no deber√≠as usar sin cuidado adicional.</p>\n<h2 id=\"-flujos-de-trabajo-comunes\">üßëüèª‚Äçüíª Flujos de Trabajo Comunes</h2>\n<p>Muchos equipos usan git, y muchos equipos tienen muchas convenciones sobre c√≥mo trabajar con √©l. Puede haber convenciones sobre nombres de ramas, mensajes de commit o solicitudes de extracci√≥n. Pero lo que la mayor√≠a de ellos tienen en com√∫n son las Solicitudes de Fusi√≥n o Pull Requests, que es lo mismo - nombre diferente. Es el proceso de solicitar fusionar tu rama en la principal (u otra cualquiera). Alguien entonces probablemente echar√° un vistazo a los cambios que has realizado y decidir√° si est√°n bien o no - esto se llama una Revisi√≥n de C√≥digo. Despu√©s de la fusi√≥n, comienzas de nuevo :)</p>";

				const frontmatter = {"layout":"../../components/layouts/MarkdownPostLayout.astro","title":"Introducci√≥n al control de versiones","pubDate":"2024-02-01T00:00:00.000Z","description":"El control de versiones es como el 'historial' de tu c√≥digo. Registra y almacena los cam...","author":"Daniel Suarez Dev","image":{"url":"/images/control-versiones-git.webp","alt":"conrtol de versiones"},"tags":["git","principiantes","github"]};
				const file = "/home/danielsuarezdev/Documents/projects/frontend/my-portfolio/src/pages/posts/introduccion-control-versiones.md";
				const url = "/posts/introduccion-control-versiones";
				function rawContent() {
					return "\n# Introducci√≥n al Control de Versiones\n\nControl de Versiones\n## ü§® ¬øQu√© es el Control de Versiones?\nEl control de versiones es como el 'historial' de tu c√≥digo. Registra y almacena los cambios que has hecho en tu c√≥digo a lo largo del tiempo. Adem√°s, te permite guardar algunos cambios y comenzar una nueva funcionalidad sin perder el progreso utilizando una rama diferente. Esto posibilita funcionalidades como comparar tu c√≥digo y cambios con el c√≥digo \"original\" con el que empezaste, revertir (algunos de) tus cambios o fusionar cambios. ¬°Esto se vuelve cada vez m√°s importante si desarrollas software en equipo! Diferentes desarrolladores pueden trabajar en distintas caracter√≠sticas sin estorbarse mutuamente.\n\n![GIF](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ21sbTQ1dzV2OG0xeWRoMGpra2F6N211cWQzZmZ0NXdmaWpiMzhmdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/VbnUQpnihPSIgIXuZv/giphy.gif)\n\n## ü§∑üèΩ ¬øPor qu√© deber√≠as usar Control de Versiones?\n¬°Tener un registro de cambios de tu c√≥digo siempre es √∫til! Ayuda con la colaboraci√≥n, previene errores cuando m√∫ltiples desarrolladores trabajan en el mismo proyecto, previene la p√©rdida de datos. Tambi√©n se utiliza para revisar cambios y que otras personas lean tus modificaciones antes de querer fusionarlas en el proyecto, a esto se le llama \"Revisi√≥n de C√≥digo\".\n\n## üõ†Ô∏è ¬øQu√© herramientas puedes usar?\nExisten muchas herramientas disponibles que te ayudan a versionar tu c√≥digo de manera adecuada. Git tiene de lejos la mayor cuota de mercado con casi el 90%, as√≠ que vamos con eso. La interfaz de l√≠nea de comandos (CLI) de git puede ser un poco abrumadora al principio, pero vale la pena echarle un vistazo m√°s de cerca. Aunque hay muchas interfaces gr√°ficas de usuario (GUI) que muestran lo que est√° sucediendo de una manera m√°s visual, recomendar√≠a aprender los comandos b√°sicos de la CLI de todos modos.\n\n## üßê ¬øC√≥mo usar git?\nPara empezar querr√°s usar el comando **git init** para iniciar un nuevo proyecto o el comando \n```sh \n    git clone [URL]\n```\n para descargar un proyecto existente y empezar a participar de inmediato.\n\n <br />\n\nDespu√©s de eso, te encontrar√°s en la rama **main**. Para no interferir con otras personas que trabajan en este proyecto, debes comenzar creando tu propia rama desde aqu√≠ usando **`git branch [Nombre de Rama]`** seguido de **`git checkout [Nombre de Rama]`**. Mientras creaste una rama con el primer comando, te cambias a ella con el segundo comando. Para ahorrar tiempo tambi√©n puedes usar el atajo **`git checkout -b [Nombre de Rama]`** donde la bandera **`-b`** crea y cambia a la rama especificada.\n\n<br />\n\nAhora que est√°s en tu propia rama, puedes comenzar a desarrollar y hacer algunos cambios. Siempre que quieras especificar archivos que deseas seguir, usa **`git add [Nombre del Archivo]`** para rastrearlo. Tambi√©n puedes especificar muchos archivos o incluso carpetas usando **`*`** pero, siendo honestos, lo m√°s probable es que uses **`git add .`** la mayor√≠a de las veces, para rastrear TODOS los archivos en esa ruta, incluyendo archivos en carpetas.\n\nCuando termines con tus cambios querr√°s comprometerlos usando **`git commit -m \"[Mensaje del Commit]\"`**. Esto agrupar√° todos los cambios en un commit con un mensaje corto pero descriptivo que le dice a otros lo que has hecho. Si no quieres comprometer tus cambios, podr√≠as querer usar\n\n```sh\n    #para ver qu√© ha cambiado\n    git diff\n``` \n\n```sh\n    #para deshacer el seguimiento de tus cambios\n    git reset [archivo]\n``` \n\n```sh\n    #para empujar esos cambios a un stash al que puedes volver m√°s tarde usando\n    git stash push\n```  \n```sh\n    #que cargar√° todos los cambios del stash en tu estado actual.\n    git stash pop\n```\n\nTodo esto ocurre en tu m√°quina local, si quieres compartir tu c√≥digo con los dem√°s debes hacer \n**`git push`** de esos cambios.\n<br/>\n\nPara ver qu√© han hecho otros puedes usar **`git fetch`**, esto cargar√° todas las ramas del estado remoto. Si quieres traer commits y sus cambios y fusionarlos en tu estado actual usa **`git pull`**.\n\nPor √∫ltimo est√° **`git merge [Nombre de Rama]`** que intentar√° fusionar cambios de otra rama en tu estado actual. Esto podr√≠a resultar en conflictos de fusi√≥n si tanto tus cambios como los de la rama que fusionaste apuntan al mismo archivo / l√≠neas de c√≥digo.\n\n¬°Estos son los b√°sicos! Dado que git es tan popular, puedes googlear f√°cilmente tu camino hacia la soluci√≥n necesaria. Casi nunca puedes perder c√≥digo, a menos que uses comandos de reset o banderas como **`--force`** o **`--hard`** las cuales no deber√≠as usar sin cuidado adicional.\n\n## üßëüèª‚Äçüíª Flujos de Trabajo Comunes\n\nMuchos equipos usan git, y muchos equipos tienen muchas convenciones sobre c√≥mo trabajar con √©l. Puede haber convenciones sobre nombres de ramas, mensajes de commit o solicitudes de extracci√≥n. Pero lo que la mayor√≠a de ellos tienen en com√∫n son las Solicitudes de Fusi√≥n o Pull Requests, que es lo mismo - nombre diferente. Es el proceso de solicitar fusionar tu rama en la principal (u otra cualquiera). Alguien entonces probablemente echar√° un vistazo a los cambios que has realizado y decidir√° si est√°n bien o no - esto se llama una Revisi√≥n de C√≥digo. Despu√©s de la fusi√≥n, comienzas de nuevo :)\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"introducci√≥n-al-control-de-versiones","text":"Introducci√≥n al Control de Versiones"},{"depth":2,"slug":"-qu√©-es-el-control-de-versiones","text":"ü§® ¬øQu√© es el Control de Versiones?"},{"depth":2,"slug":"-por-qu√©-deber√≠as-usar-control-de-versiones","text":"ü§∑üèΩ ¬øPor qu√© deber√≠as usar Control de Versiones?"},{"depth":2,"slug":"Ô∏è-qu√©-herramientas-puedes-usar","text":"üõ†Ô∏è ¬øQu√© herramientas puedes usar?"},{"depth":2,"slug":"-c√≥mo-usar-git","text":"üßê ¬øC√≥mo usar git?"},{"depth":2,"slug":"-flujos-de-trabajo-comunes","text":"üßëüèª‚Äçüíª Flujos de Trabajo Comunes"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MarkdownPostLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
