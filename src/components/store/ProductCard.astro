---
interface Props {
  id: string;
  name: string;
  price: number;
  colors: string[];
  sizes: string[];
  image: string;
  images?: Record<string, string>;
}

const { id, name, price, colors, sizes, image, images = {} } = Astro.props;

// Imagen por defecto en caso de que la imagen no esté disponible
const defaultImage = "/images/placeholder-product.jpg";

// Mapa de colores a valores hexadecimales
const colorMap: Record<string, string> = {
  "Negro": "#000000",
  "Blanco": "#FFFFFF",
  "Gris": "#808080",
  "Azul": "#0000FF",
  "Rojo": "#FF0000",
  "Amarillo": "#FFFF00"
};
---

<div class="product-card bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
  <div class="h-64 overflow-hidden product-image-container relative group cursor-pointer">
    <img 
      src={image} 
      alt={name}
      class="w-full h-full object-cover product-image transition-transform group-hover:scale-105"
      onerror={`this.onerror=null; this.src='${defaultImage}'`}
    />
    <!-- Overlay con icono de zoom -->
    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100">
      <span class="w-10 h-10 bg-white rounded-full flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
        </svg>
      </span>
    </div>
  </div>
  
  <div class="p-5">
    <h3 class="product-name text-xl font-semibold mb-2">{name}</h3>
    <p class="product-price text-xl font-bold mb-4">${price.toFixed(2)}</p>
    
    <form class="product-form">
      <!-- Color selector usando círculos de colores -->
      <div class="mb-4">
        <div class="flex items-center">
          <div class="color-circles flex space-x-2">
            {colors.map(color => (
              <button 
                type="button"
                class="color-circle w-8 h-8 rounded-full border-2 border-gray-300 focus:outline-none transition-transform hover:scale-110"
                style={`background-color: ${colorMap[color] || '#888'};`}
                data-color={color}
                data-color-image={images[color] || image}
                aria-label={`Color ${color}`}
                title={color}
              >
                <span class="sr-only">{color}</span>
              </button>
            ))}
            {colors.length > 3 && <span class="text-sm text-gray-500 ml-1">+{colors.length - 3}</span>}
          </div>
          <div class="selected-color ml-3 text-sm"></div>
        </div>
        <input type="hidden" class="color-input" name="color" value="" />
      </div>
      
      <!-- Size selector usando botones -->
      <div class="mb-4">
        <div class="size-buttons grid grid-cols-5 gap-2">
          {sizes.map(size => (
            <button 
              type="button"
              class="size-button py-1 px-2 border border-gray-300 rounded text-center hover:border-purple-600 focus:outline-none"
              data-size={size}
            >
              {size}
            </button>
          ))}
        </div>
        <input type="hidden" class="size-input" name="size" value="" />
      </div>
      
      <!-- Cantidad y botón de agregar al carrito -->
      <div class="flex items-center space-x-3 mt-4">
        <div class="quantity-selector flex items-center border rounded-md">
          <button type="button" class="decrease-qty px-3 py-1 text-lg font-medium">-</button>
          <input type="number" class="quantity-input w-12 text-center py-1 border-0 focus:outline-none" min="1" value="1" readonly />
          <button type="button" class="increase-qty px-3 py-1 text-lg font-medium">+</button>
        </div>
        
        <button 
          type="button" 
          class="add-to-cart flex-1 bg-gray-800 dark:bg-purple-600 text-white py-2 px-4 rounded hover:bg-gray-700 dark:hover:bg-purple-700 transition-colors"
          data-id={id}
        >
          Add to Cart
        </button>
      </div>
      
      <p class="error-message text-red-500 text-sm mt-2 hidden">Por favor selecciona color y talla</p>
      <p class="success-message text-green-500 text-sm mt-2 hidden">¡Agregado al carrito!</p>
    </form>
  </div>
  
  <!-- Modal / Lightbox para ver imagen grande -->
  <div class="image-modal fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center hidden">
    <div class="modal-content relative max-w-4xl w-full mx-4">
      <button type="button" class="close-modal absolute -top-10 right-0 text-white text-3xl">&times;</button>
      
      <div class="relative bg-white">
        <img src={image} alt={name} class="modal-image w-full h-auto max-h-[80vh] object-contain" />
        
        <!-- Controles de navegación -->
        <div class="absolute inset-x-0 top-1/2 -translate-y-1/2 flex justify-between px-4">
          <button type="button" class="prev-image bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <button type="button" class="next-image bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ id, images, colors }}>
  document.addEventListener('astro:page-load', () => {
    const card = document.querySelector(`.product-card:has([data-id="${id}"])`);
    if (!card) return;
    
    // Seleccionar color
    const colorCircles = card.querySelectorAll('.color-circle');
    const selectedColorDiv = card.querySelector('.selected-color');
    const colorInput = card.querySelector('.color-input');
    const productImage = card.querySelector('.product-image');
    
    // Variables para el modal
    const imageContainer = card.querySelector('.product-image-container');
    const modal = card.querySelector('.image-modal');
    const modalImage = card.querySelector('.modal-image');
    const closeModal = card.querySelector('.close-modal');
    const prevButton = card.querySelector('.prev-image');
    const nextButton = card.querySelector('.next-image');
    
    // Guardar todas las rutas de imágenes por color
    const allImages = colors.map(color => images[color] || '').filter(Boolean);
    if (!allImages.includes(card.querySelector('.product-image').getAttribute('src'))) {
      allImages.unshift(card.querySelector('.product-image').getAttribute('src'));
    }
    
    let currentImageIndex = 0;
    
    // Abrir el modal al hacer clic en la imagen
    if (imageContainer && modal && modalImage) {
      imageContainer.addEventListener('click', () => {
        // Actualizar la imagen del modal con la que está visible actualmente
        modalImage.src = productImage.src;
        
        // Encontrar el índice de la imagen actual para la navegación
        currentImageIndex = allImages.indexOf(productImage.src);
        if (currentImageIndex === -1) currentImageIndex = 0;
        
        // Mostrar el modal
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevenir scroll
      });
    }
    
    // Cerrar el modal
    if (closeModal && modal) {
      closeModal.addEventListener('click', () => {
        modal.classList.add('hidden');
        document.body.style.overflow = ''; // Restaurar scroll
      });
      
      // También cerrar el modal haciendo clic fuera de la imagen
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
          document.body.style.overflow = '';
        }
      });
      
      // O con la tecla ESC
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          modal.classList.add('hidden');
          document.body.style.overflow = '';
        }
      });
    }
    
    // Navegación de imágenes
    if (prevButton && allImages.length > 1) {
      prevButton.addEventListener('click', (e) => {
        e.stopPropagation();
        currentImageIndex = (currentImageIndex - 1 + allImages.length) % allImages.length;
        modalImage.src = allImages[currentImageIndex];
      });
    }
    
    if (nextButton && allImages.length > 1) {
      nextButton.addEventListener('click', (e) => {
        e.stopPropagation();
        currentImageIndex = (currentImageIndex + 1) % allImages.length;
        modalImage.src = allImages[currentImageIndex];
      });
    }
    
    // También permitir navegar con las teclas de flecha
    document.addEventListener('keydown', (e) => {
      if (modal && !modal.classList.contains('hidden')) {
        if (e.key === 'ArrowLeft' && allImages.length > 1) {
          currentImageIndex = (currentImageIndex - 1 + allImages.length) % allImages.length;
          modalImage.src = allImages[currentImageIndex];
        } else if (e.key === 'ArrowRight' && allImages.length > 1) {
          currentImageIndex = (currentImageIndex + 1) % allImages.length;
          modalImage.src = allImages[currentImageIndex];
        }
      }
    });
    
    // Función para seleccionar un color
    const selectColor = (circle) => {
      // Quitar selección previa
      colorCircles.forEach(c => c.classList.remove('ring', 'ring-offset-2', 'ring-purple-600'));
      
      // Seleccionar este color
      circle.classList.add('ring', 'ring-offset-2', 'ring-purple-600');
      const selectedColor = circle.getAttribute('data-color');
      const colorImage = circle.getAttribute('data-color-image');
      
      // Actualizar elementos UI
      if (selectedColorDiv) selectedColorDiv.textContent = selectedColor;
      if (colorInput) colorInput.value = selectedColor || '';
      
      // Cambiar la imagen según el color seleccionado
      if (productImage && colorImage) {
        // Añadir una pequeña transición
        productImage.style.opacity = '0';
        setTimeout(() => {
          productImage.src = colorImage;
          productImage.style.opacity = '1';
        }, 150);
      }
    };
    
    // Seleccionar el primer color por defecto
    if (colorCircles.length > 0) {
      selectColor(colorCircles[0]);
    }
    
    colorCircles.forEach(circle => {
      circle.addEventListener('click', () => {
        selectColor(circle);
      });
    });
    
    // Seleccionar talla
    const sizeButtons = card.querySelectorAll('.size-button');
    const sizeInput = card.querySelector('.size-input');
    
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Quitar selección previa
        sizeButtons.forEach(b => {
          b.classList.remove('bg-purple-600', 'text-white', 'border-purple-600');
          b.classList.add('border-gray-300');
        });
        
        // Seleccionar esta talla
        button.classList.remove('border-gray-300');
        button.classList.add('bg-purple-600', 'text-white', 'border-purple-600');
        const selectedSize = button.getAttribute('data-size');
        if (sizeInput) sizeInput.value = selectedSize || '';
      });
    });
    
    // Selector de cantidad
    const decreaseBtn = card.querySelector('.decrease-qty');
    const increaseBtn = card.querySelector('.increase-qty');
    const quantityInput = card.querySelector('.quantity-input');
    
    if (decreaseBtn && quantityInput) {
      decreaseBtn.addEventListener('click', () => {
        const currentVal = parseInt(quantityInput.value);
        if (currentVal > 1) {
          quantityInput.value = (currentVal - 1).toString();
        }
      });
    }
    
    if (increaseBtn && quantityInput) {
      increaseBtn.addEventListener('click', () => {
        const currentVal = parseInt(quantityInput.value);
        quantityInput.value = (currentVal + 1).toString();
      });
    }
    
    // Agregar al carrito
    const addToCartBtn = card.querySelector('.add-to-cart');
    const errorMessage = card.querySelector('.error-message');
    const successMessage = card.querySelector('.success-message');
    
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', () => {
        const selectedColor = colorInput?.value;
        const selectedSize = sizeInput?.value;
        const quantity = parseInt(quantityInput?.value || '1');
        
        if (!selectedColor || !selectedSize) {
          if (errorMessage) {
            errorMessage.classList.remove('hidden');
            setTimeout(() => errorMessage.classList.add('hidden'), 2000);
          }
          return;
        }
        
        // Crear un evento personalizado para agregar al carrito
        const addToCartEvent = new CustomEvent('add-to-cart', {
          detail: {
            id,
            color: selectedColor,
            size: selectedSize,
            quantity
          },
          bubbles: true
        });
        
        // Disparar el evento
        addToCartBtn.dispatchEvent(addToCartEvent);
        
        // Mostrar mensaje de éxito
        if (successMessage) {
          successMessage.classList.remove('hidden');
          setTimeout(() => successMessage.classList.add('hidden'), 2000);
        }
      });
    }
  });
</script>

<style>
  .product-image {
    transition: opacity 0.15s ease-in-out;
  }
  
  .modal-image {
    transition: all 0.3s ease-in-out;
  }
  
  .prev-image, .next-image {
    opacity: 0.7;
    transition: opacity 0.2s;
  }
  
  .prev-image:hover, .next-image:hover {
    opacity: 1;
  }
</style> 